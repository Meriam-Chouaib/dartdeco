{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { AsyncAction } from './AsyncAction';\n\nvar QueueAction = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(QueueAction, _super);\n\n  function QueueAction(scheduler, work) {\n    var _this = _super.call(this, scheduler, work) || this;\n\n    _this.scheduler = scheduler;\n    _this.work = work;\n    return _this;\n  }\n\n  QueueAction.prototype.schedule = function (state, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (delay > 0) {\n      return _super.prototype.schedule.call(this, state, delay);\n    }\n\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  };\n\n  QueueAction.prototype.execute = function (state, delay) {\n    return delay > 0 || this.closed ? _super.prototype.execute.call(this, state, delay) : this._execute(state, delay);\n  };\n\n  QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (delay !== null && delay > 0 || delay === null && this.delay > 0) {\n      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n    }\n\n    return scheduler.flush(this);\n  };\n\n  return QueueAction;\n}(AsyncAction);\n\nexport { QueueAction };","map":{"version":3,"sources":["C:\\Users\\ASUS\\Desktop\\D'ARTDECO\\frontend\\node_modules\\rxjs\\src\\internal\\scheduler\\QueueAction.ts"],"names":[],"mappings":";AAAA,OAAO,KAAE,OAAT,MAAsB,OAAtB;AAUA,SAAA,WAAA,QAAA,eAAA;;IAAoC,WAAA,GAAA,aAAA,UAAc,MAAd,EAAc;AAEhD,EAAA,OAAA,CAAA,SAAA,CAAA,WAAA,EAA+C,MAA/C;;AAAA,WAAA,WAAA,CAEE,SAFF,EAEE,IAFF,EAEQ;AAFc,QAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAyB,SAAzB,EAAyB,IAAzB,KAAyB,IAAzB;;AACA,IAAA,KAAA,CAAA,SAAA,GAAmD,SAAnD;;AAErB,WAAA,KAAA;AAED;;AAA2B,EAAA,WAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAiB,KAAjB,EAAiB,KAAjB,EAAiB;AAC1C,QAAI,KAAK,KAAI,KAAE,CAAf,EAAe;AACb,MAAA,KAAA,GAAO,CAAP;AACD;;AACD,QAAI,KAAC,GAAK,CAAV,EAAa;AACT,aAAM,MAAG,CAAK,SAAR,CAAS,QAAT,CAAS,IAAT,CAAS,IAAT,EAAS,KAAT,EAAS,KAAT,CAAN;AACJ;;AACA,SAAA,KAAA,GAAY,KAAZ;AACD,SAAA,KAAA,GAAA,KAAA;AAEM,SAAA,SAAA,CAAA,KAAA,CAAP,IAAO;AACL,WAAO,IAAP;AACE,GAZuB;;AAavB,EAAA,WAAA,CAAI,SAAJ,CAAc,OAAd,GAAqB,UAAQ,KAAR,EAAQ,KAAR,EAAQ;AAChC,WAAA,KAAA,GAAA,CAAA,IAAA,KAAA,MAAA,GAES,MAAA,CAAA,SAAA,CAAA,OAAA,CAAA,IAAA,CAAV,IAAU,EAAV,KAAU,EAAe,KAAf,CAFT,GAE6D,KAAA,QAAA,CAAA,KAAA,EAAA,KAAA,CAF7D;AAMC,GAPE;;AAQA,EAAA,WAAA,CAAA,SAAA,CAAO,cAAP,GAAa,UAAc,SAAd,EAAe,EAAf,EAAe,KAAf,EAA4B;AAC1C,QAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAED,MAAA,KAAO,GAAA,CAAP;AACD;;AACH,QAAA,KAAA,KAAC,IAAD,IAAC,KAAA,GAAA,CAAD,IAAC,KAAA,KAAA,IAAA,IAAA,KAAA,KAAA,GAAA,CAAD,EAAC;AAjCmC,aAiCnC,MAAA,CAAA,SAAA,CAAA,cAAA,CAAA,IAAA,CAAA,IAAA,EAAA,SAAA,EAAA,EAAA,EAAA,KAAA,CAjCmC;;;;GA4B9B;;;CA5B8B,C,WAAA,C","sourcesContent":["import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\nimport { SchedulerAction } from '../types';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}