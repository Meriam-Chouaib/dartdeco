{"ast":null,"code":"/** PURE_IMPORTS_START _multicast,_refCount,_Subject PURE_IMPORTS_END */\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\nexport function share() {\n  return function (source) {\n    return refCount()(multicast(shareSubjectFactory)(source));\n  };\n}","map":{"version":3,"sources":["C:\\Users\\ASUS\\Desktop\\D'ARTDECO\\frontend\\node_modules\\rxjs\\src\\internal\\operators\\share.ts"],"names":[],"mappings":"AACA;AACA,SAAS,SAAT,QAAyB,aAAzB;AACA,SAAS,QAAT,QAAwB,YAAxB;AAIA,SAAS,OAAT,QAAS,YAAT;;AACE,SAAA,mBAAA,GAAqB;AACtB,SAAA,IAAA,OAAA,EAAA;AAcD;;AACE,OAAA,SAAO,KAAP,GAAQ;AACT,SAAA,UAAA,MAAA,EAAA;AAAA,WAAA,QAAA,GAAA,SAAA,CAAA,mBAAA,CAAA,CAAA,MAAA,CAAA,CAAA;AAAA,GAAA","sourcesContent":["import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\n\nimport { MonoTypeOperatorFunction } from '../types';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for `multicast(() => new Subject()), refCount()`.\n *\n * ![](share.png)\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => refCount()(multicast(shareSubjectFactory)(source)) as Observable<T>;\n}\n"]},"metadata":{},"sourceType":"module"}