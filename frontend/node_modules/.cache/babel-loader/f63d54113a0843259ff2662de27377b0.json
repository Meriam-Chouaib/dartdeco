{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_Subscription,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function windowToggle(openings, closingSelector) {\n  return function (source) {\n    return source.lift(new WindowToggleOperator(openings, closingSelector));\n  };\n}\n\nvar WindowToggleOperator = /*@__PURE__*/function () {\n  function WindowToggleOperator(openings, closingSelector) {\n    this.openings = openings;\n    this.closingSelector = closingSelector;\n  }\n\n  WindowToggleOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  };\n\n  return WindowToggleOperator;\n}();\n\nvar WindowToggleSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(WindowToggleSubscriber, _super);\n\n  function WindowToggleSubscriber(destination, openings, closingSelector) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.openings = openings;\n    _this.closingSelector = closingSelector;\n    _this.contexts = [];\n\n    _this.add(_this.openSubscription = subscribeToResult(_this, openings, openings));\n\n    return _this;\n  }\n\n  WindowToggleSubscriber.prototype._next = function (value) {\n    var contexts = this.contexts;\n\n    if (contexts) {\n      var len = contexts.length;\n\n      for (var i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  };\n\n  WindowToggleSubscriber.prototype._error = function (err) {\n    var contexts = this.contexts;\n    this.contexts = null;\n\n    if (contexts) {\n      var len = contexts.length;\n      var index = -1;\n\n      while (++index < len) {\n        var context_1 = contexts[index];\n        context_1.window.error(err);\n        context_1.subscription.unsubscribe();\n      }\n    }\n\n    _super.prototype._error.call(this, err);\n  };\n\n  WindowToggleSubscriber.prototype._complete = function () {\n    var contexts = this.contexts;\n    this.contexts = null;\n\n    if (contexts) {\n      var len = contexts.length;\n      var index = -1;\n\n      while (++index < len) {\n        var context_2 = contexts[index];\n        context_2.window.complete();\n        context_2.subscription.unsubscribe();\n      }\n    }\n\n    _super.prototype._complete.call(this);\n  };\n\n  WindowToggleSubscriber.prototype._unsubscribe = function () {\n    var contexts = this.contexts;\n    this.contexts = null;\n\n    if (contexts) {\n      var len = contexts.length;\n      var index = -1;\n\n      while (++index < len) {\n        var context_3 = contexts[index];\n        context_3.window.unsubscribe();\n        context_3.subscription.unsubscribe();\n      }\n    }\n  };\n\n  WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    if (outerValue === this.openings) {\n      var closingNotifier = void 0;\n\n      try {\n        var closingSelector = this.closingSelector;\n        closingNotifier = closingSelector(innerValue);\n      } catch (e) {\n        return this.error(e);\n      }\n\n      var window_1 = new Subject();\n      var subscription = new Subscription();\n      var context_4 = {\n        window: window_1,\n        subscription: subscription\n      };\n      this.contexts.push(context_4);\n      var innerSubscription = subscribeToResult(this, closingNotifier, context_4);\n\n      if (innerSubscription.closed) {\n        this.closeWindow(this.contexts.length - 1);\n      } else {\n        innerSubscription.context = context_4;\n        subscription.add(innerSubscription);\n      }\n\n      this.destination.next(window_1);\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  };\n\n  WindowToggleSubscriber.prototype.notifyError = function (err) {\n    this.error(err);\n  };\n\n  WindowToggleSubscriber.prototype.notifyComplete = function (inner) {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf(inner.context));\n    }\n  };\n\n  WindowToggleSubscriber.prototype.closeWindow = function (index) {\n    if (index === -1) {\n      return;\n    }\n\n    var contexts = this.contexts;\n    var context = contexts[index];\n    var window = context.window,\n        subscription = context.subscription;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  };\n\n  return WindowToggleSubscriber;\n}(OuterSubscriber);","map":{"version":3,"sources":["C:\\Users\\ASUS\\Desktop\\D'ARTDECO\\frontend\\node_modules\\rxjs\\src\\internal\\operators\\windowToggle.ts"],"names":[],"mappings":"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","sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../types';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowToggle.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * ## Example\n * Every other second, emit the click events from the next 500ms\n * ```ts\n * import { fromEvent, interval, EMPTY } from 'rxjs';\n * import { windowToggle, mergeAll } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const openings = interval(1000);\n * const result = clicks.pipe(\n *   windowToggle(openings, i => i % 2 ? interval(500) : EMPTY),\n *   mergeAll()\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings as any));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n      let closingNotifier;\n      try {\n        const { closingSelector } = this;\n        closingNotifier = closingSelector(innerValue);\n      } catch (e) {\n        return this.error(e);\n      }\n\n      const window = new Subject<T>();\n      const subscription = new Subscription();\n      const context = { window, subscription };\n      this.contexts.push(context);\n      const innerSubscription = subscribeToResult(this, closingNotifier, context as any);\n\n      if (innerSubscription.closed) {\n        this.closeWindow(this.contexts.length - 1);\n      } else {\n        (<any>innerSubscription).context = context;\n        subscription.add(innerSubscription);\n      }\n\n      this.destination.next(window);\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}