{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Scheduler } from '../Scheduler';\n\nvar AsyncScheduler = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(AsyncScheduler, _super);\n\n  function AsyncScheduler(SchedulerAction, now) {\n    if (now === void 0) {\n      now = Scheduler.now;\n    }\n\n    var _this = _super.call(this, SchedulerAction, function () {\n      if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {\n        return AsyncScheduler.delegate.now();\n      } else {\n        return now();\n      }\n    }) || this;\n\n    _this.actions = [];\n    _this.active = false;\n    _this.scheduled = undefined;\n    return _this;\n  }\n\n  AsyncScheduler.prototype.schedule = function (work, delay, state) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n      return AsyncScheduler.delegate.schedule(work, delay, state);\n    } else {\n      return _super.prototype.schedule.call(this, work, delay, state);\n    }\n  };\n\n  AsyncScheduler.prototype.flush = function (action) {\n    var actions = this.actions;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    var error;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift());\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n\n      throw error;\n    }\n  };\n\n  return AsyncScheduler;\n}(Scheduler);\n\nexport { AsyncScheduler };","map":{"version":3,"sources":["C:\\Users\\ASUS\\Desktop\\D'ARTDECO\\frontend\\node_modules\\rxjs\\src\\internal\\scheduler\\AsyncScheduler.ts"],"names":[],"mappings":";AAAA,OAAO,KAAE,OAAT,MAAoB,OAApB;AAMA,SAAA,SAAA,QAAA,cAAA;;IAAoC,cAAA,GAAA,aAAA,UAAS,MAAT,EAAS;AAmB3C,EAAA,OAAA,CAAA,SAAA,CAAA,cAAA,EAAY,MAAZ;;AACY,WAAA,cAAA,CAAA,eAAA,EAA6B,GAA7B,EAAiC;AAD7C,QAAA,GAAA,KAEE,KAAA,CAFF,EAEE;AACE,MAAA,GAAA,GAAI,SAAA,CAAA,GAAJ;AACE;;QACD,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA,eAAA,EAAA,YAAA;UAAM,cAAA,CAAA,QAAA,IAAA,cAAA,CAAA,QAAA,KAAA,K,EAAA;AACL,eAAO,cAAM,CAAA,QAAN,CAAM,GAAN,EAAP;AACD,O,MACD;AAzBG,eAAO,GAA8B,EAArC;AAOA;AAQA,KAOF,KAPE,I;;;AAWN,IAAA,KAAA,CAAA,MAAA,GAAA,KAAA;AAEM,IAAA,KAAA,CAAA,SAAA,GAAP,SAAO;AAAiE,WAAA,KAAA;AACtE;;AACE,EAAA,cAAA,CAAO,SAAP,CAAO,QAAP,GAAsB,UAAS,IAAT,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC;AAC3D,QAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAM,MAAA,KAAA,GAAA,CAAA;AACL;;AACD,QAAA,cAAA,CAAA,QAAA,IAAA,cAAA,CAAA,QAAA,KAAA,IAAA,EAAA;AACF,aAAA,cAAA,CAAA,QAAA,CAAA,QAAA,CAAA,IAAA,EAAA,KAAA,EAAA,KAAA,CAAA;AAED,KAHG,MAKM;AAEH,aAAK,MAAQ,CAAA,SAAR,CAAQ,QAAR,CAAQ,IAAR,CAAQ,IAAR,EAAQ,IAAR,EAAQ,KAAR,EAAQ,KAAR,CAAL;AACF;AACA,GAZA;;AAaD,EAAA,cAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAA,MAAA,EAAA;AAED,QAAI,OAAW,GAAA,KAAA,OAAf;;AACA,QAAI,KAAC,MAAL,EAAc;AAEX,MAAA,OAAA,CAAA,IAAA,CAAA,MAAA;AACD;AACE;;QACD,K;AACF,SAAA,MAAA,GAAQ,IAAR;;AAED,OAAA;AAEI,UAAA,KAAO,GAAA,MAAA,CAAA,OAAA,CAAA,MAAA,CAAA,KAAA,EAAA,MAAA,CAAA,KAAA,CAAP,EAAO;AACT;AACE;AACD,KALH,QAKG,MAAA,GAAA,OAAA,CAAA,KAAA,EALH;;AAME,SAAA,MAAA,GAAM,KAAN;;AACD,QAAA,KAAA,EAAA;AACF,aAAA,MAAA,GAAA,OAAA,CAAA,KAAA,EAAA,EAAA;AACH,QAAA,MAAA,CAAA,WAAA;AAjE6C;;;;GA6CxC;;;CA7C+B,C,SAAA,C","sourcesContent":["import { Scheduler } from '../Scheduler';\nimport { Action } from './Action';\nimport { AsyncAction } from './AsyncAction';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\n\nexport class AsyncScheduler extends Scheduler {\n  public static delegate?: Scheduler;\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   * @deprecated internal use only\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   * @deprecated internal use only\n   */\n  public scheduled: any = undefined;\n\n  constructor(SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    super(SchedulerAction, () => {\n      if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n        return AsyncScheduler.delegate.now();\n      } else {\n        return now();\n      }\n    });\n  }\n\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n      return AsyncScheduler.delegate.schedule(work, delay, state);\n    } else {\n      return super.schedule(work, delay, state);\n    }\n  }\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}