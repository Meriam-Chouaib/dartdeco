{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_Subscriber,_Notification PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nexport function delay(delay, scheduler) {\n  if (scheduler === void 0) {\n    scheduler = async;\n  }\n\n  var absoluteDelay = isDate(delay);\n  var delayFor = absoluteDelay ? +delay - scheduler.now() : Math.abs(delay);\n  return function (source) {\n    return source.lift(new DelayOperator(delayFor, scheduler));\n  };\n}\n\nvar DelayOperator = /*@__PURE__*/function () {\n  function DelayOperator(delay, scheduler) {\n    this.delay = delay;\n    this.scheduler = scheduler;\n  }\n\n  DelayOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  };\n\n  return DelayOperator;\n}();\n\nvar DelaySubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(DelaySubscriber, _super);\n\n  function DelaySubscriber(destination, delay, scheduler) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.delay = delay;\n    _this.scheduler = scheduler;\n    _this.queue = [];\n    _this.active = false;\n    _this.errored = false;\n    return _this;\n  }\n\n  DelaySubscriber.dispatch = function (state) {\n    var source = state.source;\n    var queue = source.queue;\n    var scheduler = state.scheduler;\n    var destination = state.destination;\n\n    while (queue.length > 0 && queue[0].time - scheduler.now() <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      var delay_1 = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay_1);\n    } else {\n      this.unsubscribe();\n      source.active = false;\n    }\n  };\n\n  DelaySubscriber.prototype._schedule = function (scheduler) {\n    this.active = true;\n    var destination = this.destination;\n    destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n      source: this,\n      destination: this.destination,\n      scheduler: scheduler\n    }));\n  };\n\n  DelaySubscriber.prototype.scheduleNotification = function (notification) {\n    if (this.errored === true) {\n      return;\n    }\n\n    var scheduler = this.scheduler;\n    var message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  };\n\n  DelaySubscriber.prototype._next = function (value) {\n    this.scheduleNotification(Notification.createNext(value));\n  };\n\n  DelaySubscriber.prototype._error = function (err) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n    this.unsubscribe();\n  };\n\n  DelaySubscriber.prototype._complete = function () {\n    this.scheduleNotification(Notification.createComplete());\n    this.unsubscribe();\n  };\n\n  return DelaySubscriber;\n}(Subscriber);\n\nvar DelayMessage = /*@__PURE__*/function () {\n  function DelayMessage(time, notification) {\n    this.time = time;\n    this.notification = notification;\n  }\n\n  return DelayMessage;\n}();","map":{"version":3,"sources":["C:\\Users\\ASUS\\Desktop\\D'ARTDECO\\frontend\\node_modules\\rxjs\\src\\internal\\operators\\delay.ts"],"names":[],"mappings":"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","sourcesContent":["import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, PartialObserver, SchedulerAction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * ![](delay.png)\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * ## Examples\n * Delay each click by one second\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { delay } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const delayedClicks = clicks.pipe(delay(1000)); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n * ```\n *\n * Delay all clicks until a future date happens\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { delay } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const date = new Date('March 15, 2050 12:00:00'); // in the future\n * const delayedClicks = clicks.pipe(delay(date)); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: SchedulerLike = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: SchedulerLike;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: SchedulerAction<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      this.unsubscribe();\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: SchedulerLike) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: SchedulerLike): void {\n    this.active = true;\n    const destination = this.destination as Subscription;\n    destination.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n    this.unsubscribe();\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n"]},"metadata":{},"sourceType":"module"}