{"ast":null,"code":"import axios from \"axios\";\nimport { USER_DETAILS_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_UPDATE_PROFILE_FAIL, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS } from \"../constants/userConstants\";\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      //because when we want to sending data we send in the headers the content type \n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('api/users/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data //data request from here :  'api/users/login'\n\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (err) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: err.response && err.response.data.message ? err.response.data.message : err.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      //because when we want to sending data we send in the headers the content type \n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('api/users', {\n      name,\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data //data request from here :  'api/users/login'\n\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data //data request from here :  'api/users/login'\n\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (err) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: err.response && err.response.data.message ? err.response.data.message : err.message\n    });\n  }\n};\nexport const getUserDetails = id => async (dispatch, getState) => {\n  //because we need send the token we add in parameter getState\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); //for recupere token from userInfo found in userLogin \n\n    const config = {\n      //because when we want to sending data we send in the headers the content type \n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/users/${id}`, config);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data //data request from here :  'api/users/login'\n\n    });\n  } catch (err) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: err.response && err.response.data.message ? err.response.data.message : err.message\n    });\n  }\n};\nexport const updateUserProfile = user => async (dispatch, getState) => {\n  //because we need send the token we add in parameter getState\n  try {\n    dispatch({\n      type: USER_UPDATE_PROFILE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); //for recupere token from userInfo found in userLogin \n\n    const config = {\n      //because when we want to sending data we send in the headers the content type \n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/users/profile`, user, config);\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data //data request from here :  'api/users/login'\n\n    });\n  } catch (err) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload: err.response && err.response.data.message ? err.response.data.message : err.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/D'ARTDECO/frontend/src/actions/userActions.js"],"names":["axios","USER_DETAILS_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_LOGIN_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGOUT","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_UPDATE_PROFILE_FAIL","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","err","response","message","logout","removeItem","register","name","getUserDetails","id","getState","userLogin","userInfo","Authorization","token","get","updateUserProfile","user","put"],"mappings":"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","sourcesContent":["import axios from \"axios\"\r\nimport { USER_DETAILS_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_UPDATE_PROFILE_FAIL, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS } from \"../constants/userConstants\"\r\n\r\nexport const login = (email,password) => async (dispatch) => {\r\n  \r\n    try{\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_REQUEST\r\n        })\r\n\r\n\r\n        const config = { //because when we want to sending data we send in the headers the content type \r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            'api/users/login', \r\n            { email, password },\r\n            config\r\n            )\r\n    \r\n    dispatch({\r\n        type: USER_LOGIN_SUCCESS,\r\n        payload: data //data request from here :  'api/users/login'\r\n    })\r\n\r\n    localStorage.setItem('userInfo', JSON.stringify(data))\r\n    }catch (err){\r\n        dispatch({ type: USER_LOGIN_FAIL,\r\n            payload: err.response && err.response.data.message\r\n            ? err.response.data.message \r\n            : err.message})\r\n\r\n    }\r\n}\r\n\r\nexport const logout = () => (dispatch) =>{\r\n    localStorage.removeItem('userInfo')\r\n    dispatch({ type: USER_LOGOUT })\r\n}\r\n\r\nexport const register = (name,email,password) => async (dispatch) => {\r\n  \r\n    try{\r\n\r\n        dispatch({\r\n            type: USER_REGISTER_REQUEST\r\n        })\r\n\r\n\r\n        const config = { //because when we want to sending data we send in the headers the content type \r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            'api/users', \r\n            { name, email, password },\r\n            config\r\n            )\r\n    \r\n    dispatch({\r\n        type: USER_REGISTER_SUCCESS,\r\n        payload: data //data request from here :  'api/users/login'\r\n    })\r\n\r\n    dispatch({\r\n        type: USER_LOGIN_SUCCESS,\r\n        payload: data //data request from here :  'api/users/login'\r\n    })\r\n\r\n    localStorage.setItem('userInfo', JSON.stringify(data))\r\n    }catch (err){\r\n        dispatch({ type: USER_REGISTER_FAIL,\r\n            payload: err.response && err.response.data.message\r\n            ? err.response.data.message \r\n            : err.message})\r\n\r\n    }\r\n}\r\n\r\nexport const getUserDetails = (id) => async (dispatch, getState) => { //because we need send the token we add in parameter getState\r\n  \r\n    try{\r\n        dispatch({\r\n            type: USER_DETAILS_REQUEST\r\n        })\r\n\r\n        const { userLogin: { userInfo } } = getState()\r\n        //for recupere token from userInfo found in userLogin \r\n\r\n        const config = { //because when we want to sending data we send in the headers the content type \r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization:  `Bearer ${userInfo.token}`\r\n            },\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/users/${id}`, config\r\n         )\r\n    \r\n    dispatch({\r\n        type: USER_DETAILS_SUCCESS,\r\n        payload: data //data request from here :  'api/users/login'\r\n    })\r\n\r\n   \r\n    }catch (err){\r\n        dispatch({ type: USER_DETAILS_FAIL,\r\n            payload: err.response && err.response.data.message\r\n            ? err.response.data.message \r\n            : err.message})\r\n\r\n    }\r\n}\r\n\r\nexport const updateUserProfile = (user) => async (dispatch, getState) => { //because we need send the token we add in parameter getState\r\n  \r\n    try{\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_REQUEST,\r\n        })\r\n\r\n        const { userLogin: { userInfo } } = getState()\r\n        //for recupere token from userInfo found in userLogin \r\n\r\n        const config = { //because when we want to sending data we send in the headers the content type \r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization:  `Bearer ${userInfo.token}`\r\n            },\r\n        }\r\n\r\n        const { data } = await axios.put(`/api/users/profile`,user, config)\r\n    \r\n    dispatch({\r\n        type: USER_UPDATE_PROFILE_SUCCESS,\r\n        payload: data //data request from here :  'api/users/login'\r\n    })\r\n\r\n   \r\n    }catch (err){\r\n        dispatch({ type: USER_UPDATE_PROFILE_FAIL,\r\n            payload: err.response && err.response.data.message\r\n            ? err.response.data.message \r\n            : err.message})\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}