{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { productListReducer, productDetailsReducer } from './reducers/productReducers';\nimport { cartReducer } from './reducers/cartReducers';\nimport { userLoginReducer } from './reducers/userReducers';\nconst reducer = combineReducers({\n  // we put the reducers here in the {}\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer\n}); //if there in something we want to load it when redux start load we put it here\n\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [];\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\nconst initialState = {\n  cart: {\n    cartItems: cartItemsFromStorage\n  },\n  //recover(récuperer) the items from localstorage incartActions\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n};\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware))); //...middleware meaning whatever he passing here const middleware = [thunk] in the [thunk] he recupere here\n\nexport default store;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/D'ARTDECO/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListReducer","productDetailsReducer","cartReducer","userLoginReducer","reducer","productList","productDetails","cart","userLogin","cartItemsFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","initialState","cartItems","userInfo","middleware","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,kBAAT,EAA6BC,qBAA7B,QAA0D,4BAA1D;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAAQC,gBAAR,QAAgC,yBAAhC;AAEA,MAAMC,OAAO,GAAGR,eAAe,CAAC;AAC5B;AACAS,EAAAA,WAAW,EAAEL,kBAFe;AAG5BM,EAAAA,cAAc,EAAEL,qBAHY;AAI5BM,EAAAA,IAAI,EAAEL,WAJsB;AAK5BM,EAAAA,SAAS,EAAEL;AALiB,CAAD,CAA/B,C,CAUA;;AAEA,MAAMM,oBAAoB,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,IAAoCC,IAAI,CAACC,KAAL,CAChEH,YAAY,CAACC,OAAb,CAAqB,WAArB,CADgE,CAApC,GACQ,EADrC;AAGA,MAAMG,mBAAmB,GAAGJ,YAAY,CAACC,OAAb,CAAqB,UAArB,IAAmCC,IAAI,CAACC,KAAL,CAC9DH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAD8D,CAAnC,GACQ,IADpC;AAGA,MAAMI,YAAY,GAAG;AACjBR,EAAAA,IAAI,EAAE;AAAES,IAAAA,SAAS,EAAEP;AAAb,GADW;AACyB;AAC1CD,EAAAA,SAAS,EAAE;AAACS,IAAAA,QAAQ,EAAEH;AAAX;AAFM,CAArB;AAKA,MAAMI,UAAU,GAAG,CAACpB,KAAD,CAAnB;AAEA,MAAMqB,KAAK,GAAGxB,WAAW,CACrBS,OADqB,EAEpBW,YAFoB,EAGnBhB,mBAAmB,CAACF,eAAe,CAAC,GAAGqB,UAAJ,CAAhB,CAHA,CAAzB,C,CAKI;;AAEJ,eAAeC,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport { productListReducer, productDetailsReducer } from './reducers/productReducers'\r\nimport { cartReducer } from './reducers/cartReducers' \r\nimport {userLoginReducer } from './reducers/userReducers'\r\n\r\nconst reducer = combineReducers({\r\n    // we put the reducers here in the {}\r\n    productList: productListReducer, \r\n    productDetails: productDetailsReducer,\r\n    cart: cartReducer,\r\n    userLogin: userLoginReducer,\r\n})\r\n \r\n\r\n\r\n//if there in something we want to load it when redux start load we put it here\r\n\r\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse\r\n(localStorage.getItem('cartItems')): []\r\n\r\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse\r\n(localStorage.getItem('userInfo')): null\r\n\r\nconst initialState = {\r\n    cart: { cartItems: cartItemsFromStorage}, //recover(récuperer) the items from localstorage incartActions\r\n    userLogin: {userInfo: userInfoFromStorage},\r\n} \r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(\r\n    reducer,\r\n     initialState,\r\n      composeWithDevTools(applyMiddleware(...middleware))\r\n       )\r\n    //...middleware meaning whatever he passing here const middleware = [thunk] in the [thunk] he recupere here\r\n\r\nexport default store"]},"metadata":{},"sourceType":"module"}