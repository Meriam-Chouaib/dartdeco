{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_observable_empty PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { empty } from '../observable/empty';\nexport function repeat(count) {\n  if (count === void 0) {\n    count = -1;\n  }\n\n  return function (source) {\n    if (count === 0) {\n      return empty();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nvar RepeatOperator = /*@__PURE__*/function () {\n  function RepeatOperator(count, source) {\n    this.count = count;\n    this.source = source;\n  }\n\n  RepeatOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  };\n\n  return RepeatOperator;\n}();\n\nvar RepeatSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(RepeatSubscriber, _super);\n\n  function RepeatSubscriber(destination, count, source) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.count = count;\n    _this.source = source;\n    return _this;\n  }\n\n  RepeatSubscriber.prototype.complete = function () {\n    if (!this.isStopped) {\n      var _a = this,\n          source = _a.source,\n          count = _a.count;\n\n      if (count === 0) {\n        return _super.prototype.complete.call(this);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  };\n\n  return RepeatSubscriber;\n}(Subscriber);","map":{"version":3,"sources":["C:\\Users\\ASUS\\Desktop\\D'ARTDECO\\frontend\\node_modules\\rxjs\\src\\internal\\operators\\repeat.ts"],"names":[],"mappings":";AACA,OAAO,KAAE,OAAT,MAAqB,OAArB;AAEA,SAAS,UAAT,QAAsB,eAAtB;AA2DA,SAAM,KAAN,QAAsB,qBAAtB;AAA0B,OAAA,SAAA,MAAA,CAAA,KAAA,EAAA;AACxB,MAAA,KAAO,KAAA,KAAC,CAAR,EAAQ;AACN,IAAA,KAAI,GAAA,CAAK,CAAT;AACE;;AACD,SAAA,UAAA,MAAA,EAAA;QAAM,KAAI,KAAK,C,EAAG;AACjB,aAAO,KAAA,EAAP;AACD,K,MAAM,IAAA,KAAA,GAAA,CAAA,EAAA;AACL,aAAO,MAAM,CAAC,IAAP,CAAY,IAAI,cAAJ,CAAmB,CAAA,CAAnB,EAAmB,MAAnB,CAAZ,CAAP;AACD,KAFM,MAGP;AACH,aAAA,MAAA,CAAA,IAAA,CAAA,IAAA,cAAA,CAAA,KAAA,GAAA,CAAA,EAAA,MAAA,CAAA,CAAA;AAED;AACE,GATG;AASiB;;IACA,cAAA,GAAA,aAAqB,YAAA;AACzC,WAAC,cAAD,CAAC,KAAD,EAAC,MAAD,EAAC;AACD,SAAA,KAAA,GAAA,KAAA;AACE,SAAA,MAAA,GAAc,MAAd;AACD;;AACH,EAAA,cAAA,CAAA,SAAA,CAAC,IAAD,GAAC,UAAA,UAAA,EAAA,MAAA,EAAA;AAAA,WAAA,MAAA,CAAA,SAAA,CAAA,IAAA,gBAAA,CAAA,UAAA,EAAA,KAAA,KAAA,EAAA,KAAA,MAAA,CAAA,CAAA;AAOD,GAPA;;AAOkC,SAAA,cAAA;AAChC,CAbyC,E;;IAazC,gBAGE,GAAA,aAAM,UAAA,MAAA,EAAY;AAFA,EAAA,OAAA,CAAA,SAAA,CAAA,gBAAA,EAAa,MAAb;;AACA,WAAA,gBAAA,CAAqB,WAArB,EAAqB,KAArB,EAAqB,MAArB,EAAqB;;;AAExC,IAAA,KAAA,CAAA,KAAA,GAAA,KAAA;AACD,IAAA,KAAA,CAAA,MAAA,GAAA,MAAA;AACE,WAAK,KAAL;AACQ;;AACN,EAAA,gBAAI,CAAK,SAAT,CAAiB,QAAjB,GAAiB,YAAA;SACf,KAAA,S,EAAO;AACR,UAAA,EAAA,GAAA,IAAA;AAAA,UAAA,MAAA,GAAA,EAAA,CAAA,MAAA;AAAA,UAAA,KAAA,GAAA,EAAA,CAAA,KAAA;;UAAM,KAAI,KAAK,C,EAAG;AACjB,eAAK,MAAQ,CAAA,SAAR,CAAkB,QAAlB,CAAkB,IAAlB,CAAkB,IAAlB,CAAL;AACD,O,MACD,IAAO,KAAA,GAAU,CAAA,CAAjB,EAAqB;AACtB,aAAA,KAAA,GAAA,KAAA,GAAA,CAAA;AACF;;AACH,MAAA,MAAA,CAAA,SAAA,CAAC,KAAA,sBAAA,EAAD;AAjBkC;GAS5B;;;CALI,C,UAAA,C","sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { empty } from '../observable/empty';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that will resubscribe to the source stream when the source stream completes, at most count times.\n *\n * <span class=\"informal\">Repeats all values emitted on the source. It's like {@link retry}, but for non error cases.</span>\n *\n * ![](repeat.png)\n *\n * Similar to {@link retry}, this operator repeats the stream of items emitted by the source for non error cases.\n * Repeat can be useful for creating observables that are meant to have some repeated pattern or rhythm.\n *\n * Note: `repeat(0)` returns an empty observable and `repeat()` will repeat forever\n *\n * ## Example\n * Repeat a message stream\n * ```ts\n * import { of } from 'rxjs';\n * import { repeat, delay } from 'rxjs/operators';\n *\n * const source = of('Repeat message');\n * const example = source.pipe(repeat(3));\n * example.subscribe(x => console.log(x));\n *\n * // Results\n * // Repeat message\n * // Repeat message\n * // Repeat message\n * ```\n *\n * Repeat 3 values, 2 times\n * ```ts\n * import { interval } from 'rxjs';\n * import { repeat, take } from 'rxjs/operators';\n *\n * const source = interval(1000);\n * const example = source.pipe(take(3), repeat(2));\n * example.subscribe(x => console.log(x));\n *\n * // Results every second\n * // 0\n * // 1\n * // 2\n * // 0\n * // 1\n * // 2\n * ```\n *\n * @see {@link repeatWhen}\n * @see {@link retry}\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that will resubscribe to the source stream when the source stream completes\n * , at most count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return empty();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}