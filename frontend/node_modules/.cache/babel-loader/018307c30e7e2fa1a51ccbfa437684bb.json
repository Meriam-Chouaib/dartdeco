{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\D'ARTDECO\\\\frontend\\\\src\\\\pages\\\\profileScreen\\\\ProfileScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Loader from '../../components/loader/Loader';\nimport { getUserDetails } from '../../actions/userActions';\nimport FormLogin from '../../components/formLogin/FormLogin';\nimport { Form, Button, Row, Col } from 'react-bootstrap';\nimport { Alert } from 'antd';\nimport { useLocation } from 'react-router'; //import { useHistory } from \"react-router-dom\";\n\nimport { useNavigate } from 'react-router-dom'; //let history = useHistory();\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProfileScreen = () => {\n  _s();\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [message, setMessage] = useState(null);\n  const dispatch = useDispatch();\n  const userDetails = useSelector(state => state.userDetails);\n  const {\n    loading,\n    error,\n    user\n  } = userDetails; //this variables from the userReducers\n\n  const userLogin = useSelector(state => state.userLogin);\n  const {\n    userInfo\n  } = userLogin;\n  const location = useLocation();\n  const history = useNavigate();\n  useEffect(() => {\n    if (!userInfo) {\n      history('/signin'); //history.push(redirect)\n    } else {\n      if (!user.name) {\n        dispatch(getUserDetails('profile'));\n      } else {\n        setName(user.name);\n        setEmail(user.email);\n      }\n    }\n  }, [dispatch, history, user]); //because when they change it we want to redirect again\n\n  function submitHandler(e) {\n    e.preventDefault(); //dispatch (sending) login\n\n    if (password !== confirmPassword) {\n      setMessage('password do not match');\n    } else {//dispatch(register(name,email, password)) \n      //passing email and password from the form\n    }\n  } //**************form********************************\n\n\n  const onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"profile-form\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"User profile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }, this), message && /*#__PURE__*/_jsxDEV(Alert, {\n          message: \"Error Text\",\n          type: \"error\",\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: submitHandler,\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"name\",\n              placeholder: \"Name\",\n              value: name,\n              onChange: e => setName(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"email\",\n              placeholder: \"Email\",\n              value: email,\n              onChange: e => setEmail(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"password\",\n              placeholder: \"password\",\n              value: password,\n              onChange: e => setPassword(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"confirmPassword\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Confirm password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"Password\",\n              placeholder: \"confirm the password\",\n              value: confirmPassword,\n              onChange: e => setConfirmPassword(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"primary\",\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"My orders\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 7\n  }, this);\n};\n\n_s(ProfileScreen, \"aC5ml+TZ80iJOz0fbte80+3AdBo=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useLocation, useNavigate];\n});\n\n_c = ProfileScreen;\nexport default ProfileScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileScreen\");","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/D'ARTDECO/frontend/src/pages/profileScreen/ProfileScreen.js"],"names":["React","useState","useEffect","useDispatch","useSelector","Loader","getUserDetails","FormLogin","Form","Button","Row","Col","Alert","useLocation","useNavigate","ProfileScreen","name","setName","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","message","setMessage","dispatch","userDetails","state","loading","error","user","userLogin","userInfo","location","history","submitHandler","e","preventDefault","onFinishFailed","errorInfo","console","log","target","value"],"mappings":"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","sourcesContent":["import React , {useState, useEffect} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Loader from '../../components/loader/Loader';\r\nimport { getUserDetails } from '../../actions/userActions';\r\nimport FormLogin from '../../components/formLogin/FormLogin';\r\nimport { Form , Button,Row,Col } from 'react-bootstrap';\r\nimport { Alert } from 'antd';\r\nimport { useLocation } from 'react-router';\r\n//import { useHistory } from \"react-router-dom\";\r\nimport {useNavigate} from 'react-router-dom';\r\n\r\n    \r\n//let history = useHistory();\r\n\r\n\r\nconst ProfileScreen = () => {\r\n \r\n \r\n    const [name , setName] = useState('')\r\n    const [email , setEmail] = useState('')\r\n    const [password , setPassword] = useState('')\r\n    const [confirmPassword , setConfirmPassword] = useState('')\r\n    const [message , setMessage] = useState(null)\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    \r\n\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const { loading, error, user } = userDetails \r\n    //this variables from the userReducers\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin \r\n\r\n    const location = useLocation();\r\n\r\n    \r\n  \r\n    const history = useNavigate();\r\n\r\n    useEffect (() => {\r\n        if(!userInfo){\r\n          history('/signin')\r\n            //history.push(redirect)\r\n        } else {\r\n            if(!user.name){\r\n                dispatch(getUserDetails('profile'))\r\n            }else{\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n            }\r\n        }\r\n    },[dispatch,history, user]) //because when they change it we want to redirect again\r\n\r\n    \r\n   \r\n   \r\n\r\n    function submitHandler(e) {\r\n    \r\n      e.preventDefault();\r\n      //dispatch (sending) login\r\n    if(password !== confirmPassword){\r\n        setMessage('password do not match')\r\n\r\n    }else {\r\n      //dispatch(register(name,email, password)) \r\n      //passing email and password from the form\r\n    }\r\n     \r\n \r\n  }\r\n\r\n    \r\n    //**************form********************************\r\n      \r\n\r\n    \r\n      const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo);\r\n      };\r\n\r\n  return (\r\n      <div className=\"profile-form\">\r\n        \r\n      <Row>\r\n        <Col>\r\n\r\n        <h2>User profile</h2>\r\n          {message &&     <Alert message=\"Error Text\" type=\"error\" >{message}</Alert>}\r\n          <Form  onSubmit={submitHandler}  >\r\n\r\n          <Form.Group>\r\n          <Form.Label>Name</Form.Label>\r\n          <Form.Control type=\"name\" placeholder=\"Name\" value={name} \r\n            onChange={(e) => setName(e.target.value)}>\r\n\r\n            </Form.Control>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label>Email</Form.Label>\r\n          <Form.Control type=\"email\" placeholder=\"Email\" value={email} \r\n            onChange={(e) => setEmail(e.target.value)}>\r\n\r\n            </Form.Control>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label>Password</Form.Label>\r\n          <Form.Control type=\"password\" placeholder=\"password\" value={password} \r\n            onChange={(e) => setPassword(e.target.value)}>\r\n              \r\n          </Form.Control>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId='confirmPassword'>\r\n          <Form.Label>Confirm password</Form.Label>\r\n          <Form.Control type=\"Password\" placeholder=\"confirm the password\" value={confirmPassword} \r\n            onChange={(e) => setConfirmPassword(e.target.value)}>\r\n              \r\n          </Form.Control>\r\n        </Form.Group>\r\n\r\n        <Button  type='submit' variant='primary'>\r\n          Update\r\n        </Button>\r\n\r\n        \r\n      \r\n      </Form>\r\n        </Col>\r\n        <Col >\r\n          <h2>My orders</h2>\r\n        </Col>\r\n    </Row>\r\n     \r\n     \r\n\r\n      \r\n   \r\n       </div>\r\n \r\n  )}\r\n\r\nexport default ProfileScreen\r\n"]},"metadata":{},"sourceType":"module"}