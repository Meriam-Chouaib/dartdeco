{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function debounce(durationSelector) {\n  return function (source) {\n    return source.lift(new DebounceOperator(durationSelector));\n  };\n}\n\nvar DebounceOperator = /*@__PURE__*/function () {\n  function DebounceOperator(durationSelector) {\n    this.durationSelector = durationSelector;\n  }\n\n  DebounceOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  };\n\n  return DebounceOperator;\n}();\n\nvar DebounceSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(DebounceSubscriber, _super);\n\n  function DebounceSubscriber(destination, durationSelector) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.durationSelector = durationSelector;\n    _this.hasValue = false;\n    return _this;\n  }\n\n  DebounceSubscriber.prototype._next = function (value) {\n    try {\n      var result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  };\n\n  DebounceSubscriber.prototype._complete = function () {\n    this.emitValue();\n    this.destination.complete();\n  };\n\n  DebounceSubscriber.prototype._tryNext = function (value, duration) {\n    var subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = innerSubscribe(duration, new SimpleInnerSubscriber(this));\n\n    if (subscription && !subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  };\n\n  DebounceSubscriber.prototype.notifyNext = function () {\n    this.emitValue();\n  };\n\n  DebounceSubscriber.prototype.notifyComplete = function () {\n    this.emitValue();\n  };\n\n  DebounceSubscriber.prototype.emitValue = function () {\n    if (this.hasValue) {\n      var value = this.value;\n      var subscription = this.durationSubscription;\n\n      if (subscription) {\n        this.durationSubscription = undefined;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n\n      this.value = undefined;\n      this.hasValue = false;\n\n      _super.prototype._next.call(this, value);\n    }\n  };\n\n  return DebounceSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"sources":["C:\\Users\\ASUS\\Desktop\\D'ARTDECO\\frontend\\node_modules\\rxjs\\src\\internal\\operators\\debounce.ts"],"names":[],"mappings":"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","sourcesContent":["import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, SubscribableOrPromise, TeardownLogic } from '../types';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * ![](debounce.png)\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * ## Example\n * Emit the most recent click after a burst of clicks\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { debounce } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(debounce(() => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n  private value?: T;\n  private hasValue = false;\n  private durationSubscription?: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error!(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete!();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<any>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = innerSubscribe(duration, new SimpleInnerSubscriber(this));\n    if (subscription && !subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = undefined;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      // This must be done *before* passing the value\n      // along to the destination because it's possible for\n      // the value to synchronously re-enter this operator\n      // recursively if the duration selector Observable\n      // emits synchronously\n      this.value = undefined;\n      this.hasValue = false;\n      super._next(value!);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}