{"ast":null,"code":"/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar nextHandle = 1;\n\nvar RESOLVED = /*@__PURE__*/function () {\n  return /*@__PURE__*/Promise.resolve();\n}();\n\nvar activeHandles = {};\n\nfunction findAndClearHandle(handle) {\n  if (handle in activeHandles) {\n    delete activeHandles[handle];\n    return true;\n  }\n\n  return false;\n}\n\nexport var Immediate = {\n  setImmediate: function (cb) {\n    var handle = nextHandle++;\n    activeHandles[handle] = true;\n    RESOLVED.then(function () {\n      return findAndClearHandle(handle) && cb();\n    });\n    return handle;\n  },\n  clearImmediate: function (handle) {\n    findAndClearHandle(handle);\n  }\n};\nexport var TestTools = {\n  pending: function () {\n    return Object.keys(activeHandles).length;\n  }\n};","map":{"version":3,"sources":["C:\\Users\\ASUS\\Desktop\\D'ARTDECO\\frontend\\node_modules\\rxjs\\src\\internal\\util\\Immediate.ts"],"names":[],"mappings":"AAAA;AACA,IAAM,UAAQ,GAAI,CAAlB;;AACA,IAAM,QAAA,GAAA,aAA2C,YAAA;AAAA,SAAA,aAAA,OAAA,CAAA,OAAA,EAAA;AAAA,CAAA,EAAjD;;AAOA,IAAA,aAAS,GAAA,EAAT;;AACE,SAAI,kBAAJ,CAAc,MAAd,EAA6B;MAC3B,MAAA,IAAO,a,EAAc;AACrB,WAAO,aAAK,CAAA,MAAA,CAAZ;AACD,WAAA,IAAA;AACD;;AACD,SAAA,KAAA;AAKD;;AACE,OAAA,IAAA,SAAA,GAAA;AACE,EAAA,YAAM,EAAM,UAAG,EAAH,EAAa;AACzB,QAAA,MAAA,GAAa,UAAQ,EAArB;AACA,IAAA,aAAa,CAAC,MAAD,CAAb,GAAc,IAAd;AACA,IAAA,QAAO,CAAA,IAAP,CAAc,YAAA;AAAA,aAAA,kBAAA,CAAA,MAAA,CAAA,IAAA,EAAA,EAAA;AAAA,KAAd;AACD,WAAA,MAAA;AAED,GAPA;AAQE,EAAA,cAAA,EAAA,UAAmB,MAAnB,EAA2B;AAC5B,IAAA,kBAAA,CAAA,MAAA,CAAA;AACD;AAVA,CAAA;AAgBA,OAAA,IAAO,SAAA,GAAA;AACL,EAAA,OAAA,EAAA,YAAc;AACf,WAAA,MAAA,CAAA,IAAA,CAAA,aAAA,EAAA,MAAA;AACD;AAHO,CAAP","sourcesContent":["let nextHandle = 1;\nconst RESOLVED = (() => Promise.resolve())();\nconst activeHandles: { [key: number]: any } = {};\n\n/**\n * Finds the handle in the list of active handles, and removes it.\n * Returns `true` if found, `false` otherwise. Used both to clear\n * Immediate scheduled tasks, and to identify if a task should be scheduled.\n */\nfunction findAndClearHandle(handle: number): boolean {\n  if (handle in activeHandles) {\n    delete activeHandles[handle];\n    return true;\n  }\n  return false;\n}\n\n/**\n * Helper functions to schedule and unschedule microtasks.\n */\nexport const Immediate = {\n  setImmediate(cb: () => void): number {\n    const handle = nextHandle++;\n    activeHandles[handle] = true;\n    RESOLVED.then(() => findAndClearHandle(handle) && cb());\n    return handle;\n  },\n\n  clearImmediate(handle: number): void {\n    findAndClearHandle(handle);\n  },\n};\n\n/**\n * Used for internal testing purposes only. Do not export from library.\n */\nexport const TestTools = {\n  pending() {\n    return Object.keys(activeHandles).length;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}