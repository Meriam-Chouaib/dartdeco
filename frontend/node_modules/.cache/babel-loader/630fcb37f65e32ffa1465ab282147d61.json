{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { isArray } from '../util/isArray';\nimport { fromArray } from './fromArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function race() {\n  var observables = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    observables[_i] = arguments[_i];\n  }\n\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = observables[0];\n    } else {\n      return observables[0];\n    }\n  }\n\n  return fromArray(observables, undefined).lift(new RaceOperator());\n}\n\nvar RaceOperator = /*@__PURE__*/function () {\n  function RaceOperator() {}\n\n  RaceOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  };\n\n  return RaceOperator;\n}();\n\nexport { RaceOperator };\n\nvar RaceSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(RaceSubscriber, _super);\n\n  function RaceSubscriber(destination) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.hasFirst = false;\n    _this.observables = [];\n    _this.subscriptions = [];\n    return _this;\n  }\n\n  RaceSubscriber.prototype._next = function (observable) {\n    this.observables.push(observable);\n  };\n\n  RaceSubscriber.prototype._complete = function () {\n    var observables = this.observables;\n    var len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (var i = 0; i < len && !this.hasFirst; i++) {\n        var observable = observables[i];\n        var subscription = subscribeToResult(this, observable, undefined, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n\n        this.add(subscription);\n      }\n\n      this.observables = null;\n    }\n  };\n\n  RaceSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (var i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          var subscription = this.subscriptions[i];\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  };\n\n  return RaceSubscriber;\n}(OuterSubscriber);\n\nexport { RaceSubscriber };","map":{"version":3,"sources":["C:\\Users\\ASUS\\Desktop\\D'ARTDECO\\frontend\\node_modules\\rxjs\\src\\internal\\observable\\race.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { fromArray } from './fromArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { TeardownLogic, ObservableInput } from '../types';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n// tslint:disable:max-line-length\nexport function race<A>(arg: [ObservableInput<A>]): Observable<A>;\nexport function race<A, B>(arg: [ObservableInput<A>, ObservableInput<B>]): Observable<A | B>;\nexport function race<A, B, C>(arg: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>]): Observable<A | B | C>;\nexport function race<A, B, C, D>(arg: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>, ObservableInput<D>]): Observable<A | B | C | D>;\nexport function race<A, B, C, D, E>(arg: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>, ObservableInput<D>, ObservableInput<E>]): Observable<A | B | C | D | E>;\nexport function race<T>(arg: ObservableInput<T>[]): Observable<T>;\nexport function race(arg: ObservableInput<any>[]): Observable<{}>;\n\nexport function race<A>(a: ObservableInput<A>): Observable<A>;\nexport function race<A, B>(a: ObservableInput<A>, b: ObservableInput<B>): Observable<A | B>;\nexport function race<A, B, C>(a: ObservableInput<A>, b: ObservableInput<B>, c: ObservableInput<C>): Observable<A | B | C>;\nexport function race<A, B, C, D>(a: ObservableInput<A>, b: ObservableInput<B>, c: ObservableInput<C>, d: ObservableInput<D>): Observable<A | B | C | D>;\nexport function race<A, B, C, D, E>(a: ObservableInput<A>, b: ObservableInput<B>, c: ObservableInput<C>, d: ObservableInput<D>, e: ObservableInput<E>): Observable<A | B | C | D | E>;\n// tslint:enable:max-line-length\n\nexport function race<T>(observables: ObservableInput<T>[]): Observable<T>;\nexport function race(observables: ObservableInput<any>[]): Observable<{}>;\nexport function race<T>(...observables: ObservableInput<T>[]): Observable<T>;\nexport function race(...observables: ObservableInput<any>[]): Observable<{}>;\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n *\n * ## Example\n * ### Subscribes to the observable that was the first to start emitting.\n *\n * ```ts\n * import { race, interval } from 'rxjs';\n * import { mapTo } from 'rxjs/operators';\n *\n * const obs1 = interval(1000).pipe(mapTo('fast one'));\n * const obs2 = interval(3000).pipe(mapTo('medium one'));\n * const obs3 = interval(5000).pipe(mapTo('slow one'));\n *\n * race(obs3, obs1, obs2)\n * .subscribe(\n *   winner => console.log(winner)\n * );\n *\n * // result:\n * // a series of 'fast one'\n * ```\n *\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(...observables: ObservableInput<any>[]): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = observables[0] as Observable<any>[];\n    } else {\n      return observables[0] as Observable<T>;\n    }\n  }\n\n  return fromArray(observables, undefined).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete!();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        const observable = observables[i];\n        const subscription = subscribeToResult(this, observable, undefined, i)!;\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null!;\n    }\n  }\n\n  notifyNext(_outerValue: T, innerValue: T,\n             outerIndex: number): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null!;\n    }\n\n    this.destination.next!(innerValue);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}