{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Observable,_scheduler_asap,_util_isNumeric PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nvar SubscribeOnObservable = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SubscribeOnObservable, _super);\n\n  function SubscribeOnObservable(source, delayTime, scheduler) {\n    if (delayTime === void 0) {\n      delayTime = 0;\n    }\n\n    if (scheduler === void 0) {\n      scheduler = asap;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.source = source;\n    _this.delayTime = delayTime;\n    _this.scheduler = scheduler;\n\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      _this.delayTime = 0;\n    }\n\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      _this.scheduler = asap;\n    }\n\n    return _this;\n  }\n\n  SubscribeOnObservable.create = function (source, delay, scheduler) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (scheduler === void 0) {\n      scheduler = asap;\n    }\n\n    return new SubscribeOnObservable(source, delay, scheduler);\n  };\n\n  SubscribeOnObservable.dispatch = function (arg) {\n    var source = arg.source,\n        subscriber = arg.subscriber;\n    return this.add(source.subscribe(subscriber));\n  };\n\n  SubscribeOnObservable.prototype._subscribe = function (subscriber) {\n    var delay = this.delayTime;\n    var source = this.source;\n    var scheduler = this.scheduler;\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source: source,\n      subscriber: subscriber\n    });\n  };\n\n  return SubscribeOnObservable;\n}(Observable);\n\nexport { SubscribeOnObservable };","map":{"version":3,"sources":["C:\\Users\\ASUS\\Desktop\\D'ARTDECO\\frontend\\node_modules\\rxjs\\src\\internal\\observable\\SubscribeOnObservable.ts"],"names":[],"mappings":";AAGA,OAAO,KAAE,OAAT,MAAqB,OAArB;AACA,SAAS,UAAT,QAAqB,eAArB;AACA,SAAS,IAAT,QAAoB,mBAApB;AAYA,SAAA,SAAA,QAAA,mBAAA;;IAA8C,qBAAA,GAAA,aAAA,UAAa,MAAb,EAAa;AAYzD,EAAA,OAAA,CAAA,SAAA,CAAA,qBAAA,EACoB,MADpB;;AACoB,WAAA,qBAAA,CAAA,MAAA,EAAA,SAAA,EAAqB,SAArB,EAAqB;AACrB,QAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAFpB,MAAA,SAGE,GAAA,CAHF;AAAmB;;AACC,QAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AACA,MAAA,SAAA,GAAA,IAAA;AAElB;;QACE,KAAI,GAAC,MAAA,CAAS,IAAT,CAAc,IAAd,KAAc,I;;AACpB,IAAA,KAAA,CAAA,MAAA,GAAA,MAAA;AACD,IAAA,KAAK,CAAA,SAAL,GAAkB,SAAlB;AACE,IAAA,KAAA,CAAA,SAAA,GAAK,SAAL;;AACD,QAAA,CAAA,SAAA,CAAA,SAAA,CAAA,IAAA,SAAA,GAAA,CAAA,EAAA;;AACF;;AApBM,QAAA,CAAA,SAAA,IAAA,OAAP,SAAA,CAAA,QAAO,KAAiC,UAAjC,EAAoD;AAAnB,MAAA,KAAA,CAAA,SAAA,GAAA,IAAA;AAAmB;;AACzD,WAAO,KAAP;AACD;;AAGM,EAAA,qBAAA,CAAA,MAAA,GAAP,UAAA,MAAA,EAAgE,KAAhE,EAAgE,SAAhE,EAAgE;AACtD,QAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AACR,MAAA,KAAO,GAAK,CAAZ;AACD;;AAeD,QAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AACQ,MAAA,SAAQ,GAAI,IAAZ;AACN;;AACA,WAAM,IAAA,qBAAA,CAA2B,MAA3B,EAA2B,KAA3B,EAA2B,SAA3B,CAAN;AAEA,GAvBK;;AAwBH,EAAA,qBAAM,CAAA,QAAN,GAAQ,UAAU,GAAV,EAAU;AACnB,QAAE,MAAA,GAAA,GAAA,CAAA,MAAF;AAAA,QAAE,UAAA,GAAA,GAAA,CAAA,UAAF;AACF,WAAA,KAAA,GAAA,CAAA,MAAA,CAAA,SAAA,CAAA,UAAA,CAAA,CAAA;AACH,GAHM;;AA/BwC,EAAA,qBAkC7C,CAAA,SAlC6C,CAkC7C,UAlC6C,GAkC7C,UAAA,UAAA,EAAA;;;;;;;;GAlC6C;;;CAAA,C,UAAA,C","sourcesContent":["import { SchedulerLike, SchedulerAction } from '../types';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  /** @nocollapse */\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: SchedulerLike = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  /** @nocollapse */\n  static dispatch<T>(this: SchedulerAction<T>, arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return this.add(source.subscribe(subscriber));\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: SchedulerLike = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule<DispatchArg<any>>(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}